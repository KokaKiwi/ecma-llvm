%token_prefix       ECMA_TOKEN_TYPE_
%token_type         { lex::Token * }
%extra_argument     { parser::Parser *parser }
%name               ecma_parse

%include
{
    #include <cassert>
    #include <cstdio>
    #include <memory>
    #include <vector>
    #include <string>
    #include "ecma/lex/token.h"
    #include "ecma/parser/parser.h"
    #include "ecma/parser/error.h"
    #include "ecma/utils/messages.h"

    #include "ecma/ast/ast.h"

    using namespace ecma;
    using namespace ecma::ast;
}

%syntax_error {
    parser::ParsingError error("Unexpected token: {token}", TOKEN);
    utils::Messages::ReportError(error.message(), TOKEN->pos(), TOKEN->length() > 0 ? TOKEN->length() - 1 : 0);
}

%token_destructor {
    delete $$;
}

{{ tokens }}
{{ rules }}
